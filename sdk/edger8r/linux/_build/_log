### Starting build.
# Target: Edger8r.ml.depends, tags: { package(str), package(yaml), extension:ml, file:Edger8r.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package yaml -modules Edger8r.ml > Edger8r.ml.depends # cached
# Target: CodeGen.ml.depends, tags: { package(str), package(yaml), extension:ml, file:CodeGen.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package yaml -modules CodeGen.ml > CodeGen.ml.depends
# Target: Ast.ml.depends, tags: { package(str), package(yaml), extension:ml, file:Ast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package yaml -modules Ast.ml > Ast.ml.depends # cached
# Target: Ast.cmo, tags: { package(str), package(yaml), byte, compile, extension:cmo, extension:ml, file:Ast.cmo, file:Ast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -ccopt -fpie -package str -package yaml -o Ast.cmo Ast.ml # cached
# Target: Lexer.mll, tags: { package(str), package(yaml), extension:mll, file:Lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex.opt -q Lexer.mll # cached
# Target: Lexer.ml.depends, tags: { package(str), package(yaml), extension:ml, file:Lexer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package yaml -modules Lexer.ml > Lexer.ml.depends # cached
# Target: Parser.mly, tags: { package(str), package(yaml), extension:mly, file:Parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
/usr/bin/ocamlyacc Parser.mly # cached
# Target: Parser.mli.depends, tags: { package(str), package(yaml), extension:mli, file:Parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package yaml -modules Parser.mli > Parser.mli.depends # cached
# Target: Parser.cmi, tags: { package(str), package(yaml), byte, compile, extension:mli, file:Parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -ccopt -fpie -package str -package yaml -o Parser.cmi Parser.mli # cached
# Target: Lexer.cmo, tags: { package(str), package(yaml), byte, compile, extension:cmo, extension:ml, file:Lexer.cmo, file:Lexer.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -ccopt -fpie -package str -package yaml -o Lexer.cmo Lexer.ml # cached
# Target: Plugin.ml.depends, tags: { package(str), package(yaml), extension:ml, file:Plugin.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package yaml -modules Plugin.ml > Plugin.ml.depends # cached
# Target: Util.ml.depends, tags: { package(str), package(yaml), extension:ml, file:Util.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package yaml -modules Util.ml > Util.ml.depends # cached
# Target: Util.cmo, tags: { package(str), package(yaml), byte, compile, extension:cmo, extension:ml, file:Util.cmo, file:Util.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -ccopt -fpie -package str -package yaml -o Util.cmo Util.ml # cached
# Target: Plugin.cmo, tags: { package(str), package(yaml), byte, compile, extension:cmo, extension:ml, file:Plugin.cmo, file:Plugin.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -ccopt -fpie -package str -package yaml -o Plugin.cmo Plugin.ml # cached
# Target: Preprocessor.ml.depends, tags: { package(str), package(yaml), extension:ml, file:Preprocessor.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package yaml -modules Preprocessor.ml > Preprocessor.ml.depends # cached
# Target: Preprocessor.cmo, tags: { package(str), package(yaml), byte, compile, extension:cmo, extension:ml, file:Preprocessor.cmo, file:Preprocessor.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -ccopt -fpie -package str -package yaml -o Preprocessor.cmo Preprocessor.ml # cached
# Target: SimpleStack.ml.depends, tags: { package(str), package(yaml), extension:ml, file:SimpleStack.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package yaml -modules SimpleStack.ml > SimpleStack.ml.depends # cached
# Target: SimpleStack.cmo, tags: { package(str), package(yaml), byte, compile, extension:cmo, extension:ml, file:SimpleStack.cmo, file:SimpleStack.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -ccopt -fpie -package str -package yaml -o SimpleStack.cmo SimpleStack.ml # cached
# Target: CodeGen.cmo, tags: { package(str), package(yaml), byte, compile, extension:cmo, extension:ml, file:CodeGen.cmo, file:CodeGen.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -ccopt -fpie -package str -package yaml -o CodeGen.cmo CodeGen.ml
+ ocamlfind ocamlc -c -ccopt -fpie -package str -package yaml -o CodeGen.cmo CodeGen.ml
File "CodeGen.ml", line 376, characters 7-8:
376 |      | _                   -> (false, "")
             ^
Warning 11 [redundant-case]: this match case is unused.
File "CodeGen.ml", line 2457, characters 8-19:
2457 |        (Util.mk_seq 0 (List.length ec.tfunc_decls - 1))
               ^^^^^^^^^^^
Error: Unbound value Util.mk_seq
Command exited with code 2.
# Compilation unsuccessful.
